# tests/case_3.pcat


program <1:1-17:5>
	body <1:11-17:4>
		declaration list <1:11-3:29>
			variable declaration <2:9-2:28>
				identifier list <2:9-2:13>
					identifier <2:9-2:10> A
					identifier <2:12-2:13> B
				type annotation <2:14-2:20>
					id type <2:16-2:20>
						identifier <2:16-2:20> REAL
				number expression <2:24-2:27> 0.0
					real <2:24-2:27> 0.0
			variable declaration <3:9-3:29>
				identifier list <3:9-3:13>
					identifier <3:9-3:10> I
					identifier <3:12-3:13> J
				type annotation <3:14-3:23>
					id type <3:16-3:23>
						identifier <3:16-3:23> INTEGER
				number expression <3:27-3:28> 0
					integer <3:27-3:28> 0
		statement list <4:6-15:41>
			assign statement <5:5-5:14>
				lvalue <5:5-5:6> A
				number expression <5:10-5:13> 5.0
					real <5:10-5:13> 5.0
			assign statement <6:5-6:13>
				lvalue <6:5-6:6> I
				unary expression <6:10-6:12> -3
					operator <6:10-6:11> -
					number expression <6:11-6:12> 3
						integer <6:11-6:12> 3
			assign statement <7:5-7:17>
				lvalue <7:5-7:6> J
				binary expression <7:10-7:16> I * 10
					lvalue expression <7:10-7:11> I
						lvalue <7:10-7:11> I
					operator <7:12-7:13> *
					number expression <7:14-7:16> 10
						integer <7:14-7:16> 10
			assign statement <8:5-8:16>
				lvalue <8:5-8:6> B
				binary expression <8:10-8:15> A + I
					lvalue expression <8:10-8:11> A
						lvalue <8:10-8:11> A
					operator <8:12-8:13> +
					lvalue expression <8:14-8:15> I
						lvalue <8:14-8:15> I
			assign statement <9:5-9:16>
				lvalue <9:5-9:6> A
				binary expression <9:10-9:15> J / B
					lvalue expression <9:10-9:11> J
						lvalue <9:10-9:11> J
					operator <9:12-9:13> /
					lvalue expression <9:14-9:15> B
						lvalue <9:14-9:15> B
			assign statement <10:5-10:16>
				lvalue <10:5-10:6> J
				binary expression <10:10-10:15> I - J
					lvalue expression <10:10-10:11> I
						lvalue <10:10-10:11> I
					operator <10:12-10:13> -
					lvalue expression <10:14-10:15> J
						lvalue <10:14-10:15> J
			assign statement <11:5-11:16>
				lvalue <11:5-11:6> I
				binary expression <11:10-11:15> J / I
					lvalue expression <11:10-11:11> J
						lvalue <11:10-11:11> J
					operator <11:12-11:13> /
					lvalue expression <11:14-11:15> I
						lvalue <11:14-11:15> I
			assign statement <12:5-12:16>
				lvalue <12:5-12:6> B
				binary expression <12:10-12:15> I - B
					lvalue expression <12:10-12:11> I
						lvalue <12:10-12:11> I
					operator <12:12-12:13> -
					lvalue expression <12:14-12:15> B
						lvalue <12:14-12:15> B
			write statement <13:5-13:40>
				write parameter list <13:13-13:38>
					write expression <13:13-13:20> " A = "
						string <13:13-13:20> " A = "
					write expression <13:22-13:24> -A
						unary expression <13:22-13:24> -A
							operator <13:22-13:23> -
							lvalue expression <13:23-13:24> A
								lvalue <13:23-13:24> A
					write expression <13:26-13:35> " | B = "
						string <13:26-13:35> " | B = "
					write expression <13:37-13:38> B
						lvalue expression <13:37-13:38> B
							lvalue <13:37-13:38> B
			write statement <14:5-14:18>
				write parameter list <14:13-14:15>
					write expression <14:13-14:15> ""
						string <14:13-14:15> ""
			write statement <15:5-15:41>
				write parameter list <15:13-15:38>
					write expression <15:13-15:20> " I = "
						string <15:13-15:20> " I = "
					write expression <15:22-15:23> I
						lvalue expression <15:22-15:23> I
							lvalue <15:22-15:23> I
					write expression <15:25-15:35> " |  J = "
						string <15:25-15:35> " |  J = "
					write expression <15:37-15:38> J
						lvalue expression <15:37-15:38> J
							lvalue <15:37-15:38> J
